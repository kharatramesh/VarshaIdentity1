@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using VarshaIdentity1.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<FluentGrid>
    <FluentGridItem xs="12" sm="6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <FluentValidationSummary class="text-danger" role="alert" />
            <FluentTextField Value="@UserFullName" Placeholder="Please choose your username."
                Appearance=FluentInputAppearance.Filled Style="width: 100%" />
            <FluentTextField Name="Input.PhoneNumber" @bind-Value="Input.PhoneNumber"
                Paceholder="Please enter your phone number." Label="Phone number" Style="width: 100%" />

            <div class="form-floating mb-3">
                <InputDate @bind-Value="Input.DateOfBirth" class="form-control"
                    placeholder="Please enter your Date of Birth" />
                <label for="DOB" class="form-label">Date of Birth</label>
                <ValidationMessage For="() => Input.DateOfBirth" class="text-danger" />
            </div>
            <FluentValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            @* <FluentDatePicker Label="D.O.B" @bind-Value="Input.DateOfBirth" Placeholder="Please choose your DOB."
            Style="width: 100%" /> *@
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">Save
            </FluentButton>
        </EditForm>
    </FluentGridItem>
</FluentGrid>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? UserEmail;
    private string? UserFullName;
    private string? phoneNumber;
    //private DateTime? dateOfBirth;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [Inject]
    IDbContextFactory<ApplicationDbContext> _dbFactory { get; set; }
    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        UserEmail = await UserManager.GetUserNameAsync(user);
        UserFullName = user.FullName;
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
        Input.DateOfBirth = user.DateOfBirth;
    }

    private async Task OnValidSubmitAsync()
    {
        using (var _dbContext = _dbFactory.CreateDbContext())
        {
            var userFromDB = await _dbContext.Users.Where(_ => _.Id == user.Id).FirstOrDefaultAsync();
            userFromDB.PhoneNumber = Input.PhoneNumber;
            if (Input.DateOfBirth != null)
            {
                userFromDB.DateOfBirth = Input.DateOfBirth;
            }
            var modified = await _dbContext.SaveChangesAsync();
            if (modified == 0)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }
        @* if (Input.PhoneNumber != phoneNumber)
{
var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
if (!updateResult.Succeeded)
{
RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
}
} *@

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [DataType(DataType.DateTime)]
        [Display(Name = "D.O.B")]
        public DateTime DateOfBirth { get; set; }
    }
}
